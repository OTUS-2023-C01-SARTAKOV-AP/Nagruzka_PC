// f_xxx() = функция
// ari_xxx = массив из целых чисел (обычно 64 битные)
// arui_xxx = массив из unsigned integer (из целых беззнаковых чисел, так же обычно 64 бита)
// ard_xxx = массив из double (дробных чисел) float не применяю, т.к память все равно занимают как double
// ars_xxx = строка символов (массив из char)
// arws_xxx = строка символов wchar (массив из широких символов char, типа русский текст и команды нужны для широких символов)
// 
// struct имя_шаблона_структуры 
// об_имя_шаблона_структуры = А это уже непосредственно сам объект (экземпляр) указанной ранее структуры
// ук_xxx = указатель, адрес в памяти ссылающийся на начало чего либа
// ук_ук_ххх (укук_xxx) = указатель на адрес в памяти, который ссылается на другой указатель = **массив_указателей_на_текст



// в этом заголовочном файле объявляются глобальные переменные и константы 
// максимальная длина значащих символа в названии = 31, где русские буквы идут за 2 символа
// для экономии символов НЕ НУЖНО комбинировать русские и латинские буквы в именах переменных
// можно только слова целиком типа ядер_cpu (12 символов) 
// но не ядep_cpu(10) (где ep_cpu это на латинице). Иначе потом натйти ошибку невозможно - её просто не видно






// Ctr + L = очистить окно терминла но при следующей команде все предыдущие команды снова вылазят выше (не подходит)
  !!!  clear самое то. Делает терминал девственно чистым!
       reset полностью перегружает окно терминала скорее всего для скидывания по умолчанию всех настроек)
// В документации объясняется:
// Какую задачу решает  каждый алгоритм
// Какие входные значения допустимы
// Что возвращает модуль\функция\программа
// Так же содержит инфу о гиперпараметрах. 



// puts("\033[50A "); реально перемещает, но потом курсор там же остаётся и весь текст  затиратя т.к печатетсяповерх предыдущего текста!!!!

 printf(setlocale(LC_ALL, ""));




// $ pg_config  --includedir        /usr/include/postgresql/
// $ pg_config --libdir             /usr/lib/
 компиляция кода делается как
cd /home/postgres/_ММВБ_Си/сеть/
gcc -o program  main.c -I/usr/include/postgresql  -L/usr/lib/postgresql/15/lib/ -lpq (это значит что 
    нужно подцепить внешние библиотеки *.so и указан путь к ним через -L для PostgreSQL)
gcc -o program main.c -I/usr/include/postgresql -lpq  (это значит что 
        нужно подцепить внешние библиотеки *.so из каталога по умолчанию для PostgreSQL)

(base) root@honor-srv:/home/postgres/_ММВБ_Си/сеть# ./program

    // там нет. Заголовочные файлы <libpq-fe.h> в каталоге по умолчанию  = /usr/local/pqsql/include 
    // есть /usr/include/postgresql/libpq-fe.h
    // для компиляции нжно использовать ключ = -I

    // там нет. Библиотека libpq будет размещена в каталоге          lib = /usr/local/pqsql/lib
    // есть /usr/include/postgresql/libpq/   типа 1 файт то есть, но на 5 строчек кода всего
    //                              а здесь есть /home/postgres/_ММВБ_Си/libpq-12.15-расширен_набор_библитек/lib/
    // так же есть, но это наверное читсый postgresql    /usr/lib/postgresql/15/lib/
    // для компиляции нужно использовать ключ = -L 

